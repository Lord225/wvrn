{
  "scopeName": "source.wvrn",
  "name": "rawrsembler",
  "fileTypes": [
    "wvrn"
  ],
  "patterns": [
    {
      "match": "([;@]|\/\/).*$",
      "name": "comment"
    },
    {
      "match": "\\b\\d+\\b",
      "name": "constant.numeric"
    },
    {
      "match": "\\b(0x)([0-9a-fA-F_]+\\b)",
      "name": "constant.numeric"
    },
    {
      "match": "\\b(0b)([0-1]+\\b)",
      "name": "constant.numeric"
    },
    {
      "match": "\\s*\\w+:",
      "name": "keyword.control.directive.conditional"
    },
    {
      "match": "\\s*(#)(define|ifdef|ifndef|data|macro|endmacro|endif|debug)",
      "name": "keyword.control"
    },
    {
      "match": "(?:(?<=#ifdef)|(?<=#ifndef)|(?<=#data)|(?<=#macro)|(?<=#endmacro)|(?<=#profile)|(?<=#endif))\\s(\\w+)\\b",
      "name": "variable.named"
    },
    {
      "match": "(?<=#debug)\\s(\\w+\\s*)+\\b",
      "name": "variable.named"
    },
    {
      "match": "\\s*(\\w+:|\\.\\w+)",
      "name": "keyword.control.directive.conditional"
    },
    {
      "match": "([A-Z_]+)",
      "name": "entity.name.type"
    },
    {
      "match": "(?:(?<=#define)\\s)([A-Z_]+)",
      "name": "entity.name.type"
    },
    {
      "match": "\\b\\w+\\s*(?=\\[.*\\])",
      "name": "entity.name.tag"
    },
    {
      "match": "\\b(sta|lda|lda\\.f|add|add\\.f|addi|addi\\.f|nand|nand\\.f|ld|ld\\.f|st|st\\.f|lim)\\b",
      "name": "keyword.instruction"
    },
    {
      "match": "\\b(jmp)\\s+(\\w+)\\b",
      "captures": {
        "1": { "name": "keyword.instruction" },
        "2": { "name": "keyword.control.directive.conditional" }
      }
    },
    {
      "match": "\\b(brc)\\s+(carry|ncarry|zero|nzero|odd|nodd|even|neven|sign|nsign|overflow|noverflow|true|false)\\s+(\\w+)\\b",
      "captures": {
        "1": { "name": "keyword.instruction" },
        "2": { "name": "constant.language" },
        "3": { "name": "keyword.control.directive.conditional" }
      }
    },
    {
      "match": "\\b\\w+\\b",
      "name": "entity.name.function"
    },
    {
      "match": "\\s*#\\w+\\s+.*",
      "name": "variable.named"
    },
    {
      "match": "\"[^\"]+$",
      "name": "invalid.illegal"
    },
    {
      "name": "string.quoted",
      "begin": "\"",
      "end": "\""
    },
    {
      "match": "\\'\\S\\'",
      "name": "string.char"
    }
  ]
}
